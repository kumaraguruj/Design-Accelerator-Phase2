@using DesignAccelerator.Models.ViewModel
@model ModuleViewModel

@{
    ViewBag.Title = "Module Input";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .button {
        background-color: #af2024;
        color: #ffffff;
    }
</style>

<div class="navbar-static-top">
    <ul class="breadcrumb"></ul>
</div>
<h2> Module Input</h2>
<hr />

@if (!string.IsNullOrEmpty(ViewBag.Status))
{
    <script>
        alert('Data saved successfully !'); // place your comment.
    </script>
}

<div class="row">
    <div class="col-md-12">
        <section id="ModuleForm">
            @using (Html.BeginForm("Index", "Module", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @*@Html.ValidationSummary(true, "ModuleInput creation was unsuccessful. Please enter correctly and try again", new { @class = "text-danger" })*@
                @Html.HiddenFor(m => m.ApplicationID)

                <div class="form-group">
                    @*@Html.LabelFor(m => m.AttributeDesc, "Attribute Name", htmlAttributes: new { @class = "col-sm-2 control-label" })*@
                    @Html.LabelFor(m => m.ModuleName, "Module Name*", new { @class = "col-md-2 control-label", @style = "text-align:left" })
                    <div class="col-md-10">
                        <span class="form-inline" style="margin-left:-90px">
                            @Html.TextBoxFor(m => m.ModuleName, new { @maxlength = "30", @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(m => m.ModuleName, "", new { @class = "text-danger" })
                        </span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10" style="margin-left:105px">
                        <input id="btnSave" type="submit" value="Add" name="action:Add" class="btn btn-default btn-group-sm; button" />
                        @*<input type="submit" value="Cancel" onclick="Cancel()" class="btn btn-warning" />*@
                    </div>
                </div>
            }
        </section>
    </div>
</div>
<br />
<br />
<div style="width:50%;">
    @{
        WebGrid grid = new WebGrid(Model.ModuleList);
        @grid.GetHtml(
              tableStyle: "table table-bordered table-hover",
              fillEmptyRows: false,
              headerStyle: "gvHeading",
              alternatingRowStyle: "gvAlternateRow",
              rowStyle: "gvRow",
              footerStyle: "gvFooter",
              mode: WebGridPagerModes.All,
              firstText: "<< First",
              previousText: "< Prev",
              nextText: "Next >",
              lastText: "Last >>",
              columns: new[] {
                                grid.Column(header: "S.No", format: item => item.WebGrid.Rows.IndexOf(item) + 1 + Math.Round(Convert.ToDouble(grid.TotalRowCount / grid.PageCount) / grid.RowsPerPage) * grid.RowsPerPage * grid.PageIndex),
                                grid.Column("ModuleName",header: "Module Name",canSort:true, format: (item) => Html.ActionLink(((string)item.ModuleName), "Index", "DesignAccelerator", new { id = item.ModuleID }, null)),
                                grid.Column("ModuleID",header:"Edit/Delete",canSort:false,
                                 format:@<text>
                                    @if(Model.EdiPermission) {
                                        @Html.ActionLink("Edit | ", "Edit", new { id=item.ModuleId});
                                              }
                                              else {
                                        <text>Edit | </text>
                                              }

                                    @if(Model.DeletePermission){
                                        @Html.ActionLink("Delete", "Delete", new { id=item.ModuleId})
                                              }
                                             else {
                                        <text>Delete</text>
                                             }

                                </text>
                                            )
                               }
                     )
}
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {

            $('.breadcrumb').append('<li><a href="@Url.Action("Index", "Client")"><span>' + "@Model.ClientName" + '</span></a></li>');
            $('.breadcrumb').append('<li><a href="@Url.Action("Index", "Project", new {id = Model.ClientID })"><span>' + "@Model.ProjectName" + '</span></a></li>');
            $('.breadcrumb').append('<li><a href="@Url.Action("Index", "Application", new {id = Model.ProjectID })"><span>' + "@Model.ApplicationName" + '</span></a></li>');
            $('.breadcrumb').append('<li><a href="@Url.Action("Index", "Module", new {id = Model.ApplicationID })"><span>' + "@Model.ModuleName" + '</span></a></li>');
        });

        $("#btnSave").on("click", function (e) {
            var ModuleNm = $("#ModuleName").val();
            ModuleNm = jQuery.trim(ModuleNm);
            //if (ModuleNm == "")
            //{
            //    alert('Cannot save empty value')
            //    return false;
            //}
            $("table tbody tr").each(function () {
                var get_Mname = $(this).find("td:nth-child(2)")[0].innerText;
                //debugger;
                if (get_Mname.toUpperCase() == ModuleNm.toUpperCase()) {
                    alert("This Module already exists");
                    e.preventDefault();
                }
            });
        });

        var model = @Html.Raw(Json.Encode(Model.AddPermmission));
        if (model == true)
            $('#btnSave').prop("disabled", "");
        else
            $('#btnSave').prop("disabled", "disabled");

        $("#ModuleName").bind('keypress', function (event) {

            var regex = new RegExp("^[a-zA-Z0-9]+$");
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            if (!regex.test(key)) {
                if (event.charCode != 32) {//if key stroke is space bar, then pass. ASCII code for space bar is 32
                    event.preventDefault();
                    return false;
                }
            }
        });

      
    </script>
}
